#!/usr/bin/env python3
"""
Playwright-based tests for SSE authentication integration in YouTube Summarizer.
Tests the complete authentication flow and SSE connection establishment in a real browser.
"""

import os
import sys
import time
import asyncio
import json
import pytest
try:
    from playwright.async_api import async_playwright, expect
except Exception:  # pragma: no cover - playwright may be unavailable
    pytest.skip("playwright not installed", allow_module_level=True)
from threading import Thread
from flask import Flask
import signal

# Set up environment for testing
os.environ['TESTING'] = 'true'
os.environ['LOGIN_ENABLED'] = 'true'
os.environ['LOGIN_USERNAME'] = 'testuser'
os.environ['LOGIN_PASSWORD_HASH'] = '5e884898da28047151d0e56f8dc6292773603d0d6aabbdd62a11ef721d1542d8'  # 'password'
os.environ['GOOGLE_API_KEY'] = 'test-key'
os.environ['OPENAI_API_KEY'] = 'test-key'

# Add project root to path
PROJECT_ROOT = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
sys.path.insert(0, PROJECT_ROOT)

# Skip these tests during normal runs as they require a full browser environment
pytestmark = pytest.mark.skip(reason="Playwright browser tests are run manually")

from app import app

# Global variable to control server
server_thread = None
shutdown_server = False

def run_flask_server():
    """Run Flask server in a separate thread for testing"""
    global shutdown_server
    app.config['TESTING'] = True
    app.config['SECRET_KEY'] = 'test-secret-key'

    # Use test server with threading
    from werkzeug.serving import make_server
    server = make_server('127.0.0.1', 5556, app, threaded=True)

    print("üöÄ Starting test server on http://127.0.0.1:5556")

    while not shutdown_server:
        server.handle_request()

    print("üõë Test server stopped")

async def test_sse_authentication_flow():
    """Test complete SSE authentication flow using Playwright"""
    print("\n" + "="*60)
    print("Testing SSE Authentication Flow with Playwright")
    print("="*60 + "\n")

    async with async_playwright() as p:
        # Launch browser
        browser = await p.chromium.launch(
            headless=True,  # Set to False to see the browser
            args=['--disable-blink-features=AutomationControlled']
        )
        context = await browser.new_context()

        # Enable console message capture
        page = await context.new_page()

        console_messages = []
        page.on("console", lambda msg: console_messages.append({
            'type': msg.type,
            'text': msg.text,
            'location': msg.location
        }))

        # Capture network requests
        sse_requests = []
        page.on("request", lambda request: (
            sse_requests.append(request) if '/events' in request.url else None
        ))

        try:
            # Test 1: Access without authentication
            print("üìù Test 1: Accessing SSE without authentication")
            await page.goto('http://127.0.0.1:5556/')

            # Should be redirected to login page
            await page.wait_for_url('**/login', timeout=5000)
            print("‚úÖ Correctly redirected to login page")

            # Test 2: Login process
            print("\nüìù Test 2: Login and session establishment")
            await page.fill('input[name="username"]', 'testuser')
            await page.fill('input[name="password"]', 'password')

            # Click login button
            await page.click('button[type="submit"]')

            # Wait for redirect to main page
            await page.wait_for_url('http://127.0.0.1:5556/', timeout=5000)
            print("‚úÖ Successfully logged in and redirected to main page")

            # Test 3: Check SSE connection establishment
            print("\nüìù Test 3: SSE connection establishment after login")

            # Wait for SSE connection to be established
            await page.wait_for_timeout(2000)  # Give SSE time to connect

            # Check for SSE connection in console
            sse_connected = False
            for msg in console_messages:
                if 'SSE' in msg['text'] and ('connect' in msg['text'].lower() or 'üîó' in msg['text']):
                    sse_connected = True
                    print(f"‚úÖ SSE connection message found: {msg['text']}")
                    break

            if not sse_connected:
                # Check if EventSource exists
                has_eventsource = await page.evaluate('''() => {
                    return typeof EventSource !== 'undefined' &&
                           window.sseClient &&
                           window.sseClient.isConnected;
                }''')

                if has_eventsource:
                    print("‚úÖ SSE client is connected (verified via JavaScript)")
                else:
                    print("‚ö†Ô∏è SSE connection status unclear")

            # Test 4: Check SSE requests include authentication
            print("\nüìù Test 4: SSE requests include authentication cookies")

            # Check if any SSE requests were made
            authenticated_sse_requests = [
                req for req in sse_requests
                if 'cookie' in req.headers
            ]

            if authenticated_sse_requests:
                print(f"‚úÖ Found {len(authenticated_sse_requests)} authenticated SSE requests")
                for req in authenticated_sse_requests[:1]:  # Show first one
                    print(f"   URL: {req.url}")
                    if 'cookie' in req.headers:
                        print(f"   Has session cookie: Yes")
            else:
                # Alternative check through JavaScript
                sse_status = await page.evaluate('''async () => {
                    try {
                        const response = await fetch('/events/status', {
                            credentials: 'include'
                        });
                        const data = await response.json();
                        return {
                            success: response.ok,
                            status: response.status,
                            connections: data.connections || 0
                        };
                    } catch (e) {
                        return { success: false, error: e.message };
                    }
                }''')

                if sse_status.get('success'):
                    print(f"‚úÖ SSE status endpoint accessible (auth working)")
                    print(f"   Active connections: {sse_status.get('connections', 0)}")

            # Test 5: Test SSE reconnection after disconnect
            print("\nüìù Test 5: SSE reconnection with authentication")

            # Simulate disconnect by evaluating JavaScript
            await page.evaluate('''() => {
                if (window.sseClient && window.sseClient.disconnect) {
                    window.sseClient.disconnect();
                    setTimeout(() => {
                        window.sseClient.connect();
                    }, 1000);
                }
            }''')

            await page.wait_for_timeout(2000)

            # Check reconnection
            reconnected = await page.evaluate('''() => {
                return window.sseClient && window.sseClient.isConnected;
            }''')

            if reconnected:
                print("‚úÖ SSE successfully reconnected with authentication")
            else:
                print("‚ö†Ô∏è SSE reconnection status unclear")

            # Test 6: Test logout breaks SSE connection
            print("\nüìù Test 6: Logout should terminate SSE connection")

            # Find and click logout button if exists
            try:
                await page.click('text=Logout', timeout=2000)
                await page.wait_for_url('**/login', timeout=5000)
                print("‚úÖ Successfully logged out")

                # Check that SSE is disconnected
                is_disconnected = not await page.evaluate('''() => {
                    return window.sseClient && window.sseClient.isConnected;
                }''')

                if is_disconnected:
                    print("‚úÖ SSE connection properly terminated after logout")
            except:
                print("‚ÑπÔ∏è Logout button not found or logout flow different")

            # Test 7: Check for security issues in console
            print("\nüìù Test 7: Security check - console errors")

            security_issues = []
            for msg in console_messages:
                if msg['type'] == 'error':
                    if any(keyword in msg['text'].lower() for keyword in
                           ['cors', 'cross-origin', 'unauthorized', 'forbidden', '401', '403']):
                        security_issues.append(msg['text'])

            if security_issues:
                print("‚ö†Ô∏è Potential security issues found:")
                for issue in security_issues:
                    print(f"   - {issue}")
            else:
                print("‚úÖ No security-related console errors detected")

            # Print summary of console messages for debugging
            print("\nüìä Console Message Summary:")
            message_types = {}
            for msg in console_messages:
                msg_type = msg['type']
                message_types[msg_type] = message_types.get(msg_type, 0) + 1

            for msg_type, count in message_types.items():
                print(f"   {msg_type}: {count} messages")

        except Exception as e:
            print(f"\n‚ùå Test failed with error: {e}")

            # Print console messages for debugging
            print("\nüîç Console messages for debugging:")
            for msg in console_messages[-10:]:  # Last 10 messages
                print(f"   [{msg['type']}] {msg['text'][:100]}")

            raise e

        finally:
            await browser.close()

async def test_sse_real_time_updates():
    """Test that authenticated users receive real-time SSE updates"""
    print("\n" + "="*60)
    print("Testing SSE Real-Time Updates for Authenticated Users")
    print("="*60 + "\n")

    async with async_playwright() as p:
        browser = await p.chromium.launch(headless=True)
        context = await browser.new_context()
        page = await context.new_page()

        # Capture SSE messages
        sse_messages = []
        await page.expose_function("captureSSEMessage", lambda msg: sse_messages.append(msg))

        try:
            # Login first
            print("üìù Logging in...")
            await page.goto('http://127.0.0.1:5556/login')
            await page.fill('input[name="username"]', 'testuser')
            await page.fill('input[name="password"]', 'password')
            await page.click('button[type="submit"]')
            await page.wait_for_url('http://127.0.0.1:5556/')
            print("‚úÖ Logged in successfully")

            # Inject SSE message capture
            await page.evaluate('''() => {
                if (window.sseClient && window.sseClient.eventSource) {
                    const originalAddEventListener = window.sseClient.eventSource.addEventListener;
                    window.sseClient.eventSource.addEventListener = function(type, listener) {
                        const wrappedListener = function(event) {
                            window.captureSSEMessage({
                                type: type,
                                data: event.data,
                                timestamp: new Date().toISOString()
                            });
                            return listener.call(this, event);
                        };
                        return originalAddEventListener.call(this, type, wrappedListener);
                    };

                    // Re-register existing handlers
                    ['connected', 'summary_progress', 'summary_complete', 'ping'].forEach(eventType => {
                        window.sseClient.eventSource.addEventListener(eventType, (event) => {
                            window.captureSSEMessage({
                                type: eventType,
                                data: event.data,
                                timestamp: new Date().toISOString()
                            });
                        });
                    });
                }
            }''')

            print("üìù Waiting for SSE messages...")
            await page.wait_for_timeout(5000)  # Wait for heartbeat or other messages

            if sse_messages:
                print(f"‚úÖ Received {len(sse_messages)} SSE messages")
                for msg in sse_messages[:3]:  # Show first 3
                    print(f"   Type: {msg['type']}")
                    try:
                        data = json.loads(msg['data']) if isinstance(msg['data'], str) else msg['data']
                        print(f"   Data preview: {str(data)[:100]}")
                    except:
                        print(f"   Data: {msg['data'][:100]}")
            else:
                print("‚ö†Ô∏è No SSE messages captured (this might be normal if no events were triggered)")

            # Test sending a test event through the broadcast endpoint
            print("\nüìù Testing broadcast to authenticated SSE connections...")

            broadcast_result = await page.evaluate('''async () => {
                try {
                    const response = await fetch('/events/broadcast', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        credentials: 'include',
                        body: JSON.stringify({
                            event: 'test_message',
                            data: { message: 'Test broadcast to authenticated users' }
                        })
                    });
                    return {
                        success: response.ok,
                        status: response.status,
                        data: await response.json()
                    };
                } catch (e) {
                    return { success: false, error: e.message };
                }
            }''')

            if broadcast_result.get('success'):
                print("‚úÖ Successfully broadcast test message")
                print(f"   Result: {broadcast_result.get('data')}")
            else:
                print(f"‚ö†Ô∏è Broadcast failed: {broadcast_result.get('error', 'Unknown error')}")

        finally:
            await browser.close()

async def main():
    """Main test runner"""
    global server_thread, shutdown_server

    try:
        # Start Flask server in background
        server_thread = Thread(target=run_flask_server, daemon=True)
        server_thread.start()

        # Wait for server to start
        print("‚è≥ Waiting for server to start...")
        await asyncio.sleep(2)

        # Run tests
        await test_sse_authentication_flow()
        await test_sse_real_time_updates()

        # Print final summary
        print("\n" + "="*60)
        print("‚úÖ All SSE Authentication Tests Completed Successfully!")
        print("="*60)
        print("\nSummary:")
        print("1. ‚úÖ SSE endpoint requires authentication")
        print("2. ‚úÖ Login establishes session for SSE access")
        print("3. ‚úÖ SSE connections include authentication cookies")
        print("4. ‚úÖ SSE reconnection maintains authentication")
        print("5. ‚úÖ Logout properly terminates SSE connections")
        print("6. ‚úÖ No security vulnerabilities detected")

    except Exception as e:
        print(f"\n‚ùå Tests failed: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)

    finally:
        # Shutdown server
        shutdown_server = True
        print("\nüõë Shutting down test server...")
        await asyncio.sleep(1)

if __name__ == "__main__":
    # Handle Ctrl+C gracefully
    def signal_handler(sig, frame):
        global shutdown_server
        shutdown_server = True
        print("\n‚ö†Ô∏è Interrupted by user")
        sys.exit(0)

    signal.signal(signal.SIGINT, signal_handler)

    # Run async main
    asyncio.run(main())
